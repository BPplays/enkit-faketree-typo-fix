load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

# gazelle:resolve go github.com/enfabrica/enkit/astore/server/templates //astore/server/templates

go_library(
    name = "go_default_library",
    srcs = ["main.go"],
    importpath = "github.com/enfabrica/enkit/astore/server",
    visibility = ["//visibility:private"],
    deps = [
        ":assets",
        ":configs",
        ":credentials",
        "//astore/common:go_default_library",
        "//astore/rpc:astore-go",
        "//astore/rpc:auth-go",
        "//astore/server/astore:go_default_library",
        "//astore/server/auth:go_default_library",
        "//astore/server/templates",
        "//lib/kflags:go_default_library",
        "//lib/kflags/kcobra:go_default_library",
        "//lib/kflags/kconfig:go_default_library",
        "//lib/khttp/kcookie:go_default_library",
        "//lib/logger:go_default_library",
        "//lib/oauth:go_default_library",
        "//lib/oauth/ogoogle:go_default_library",
        "//lib/oauth/ogrpc:go_default_library",
        "//lib/server:go_default_library",
        "//lib/srand:go_default_library",
        "@com_github_spf13_cobra//:go_default_library",
        "@org_golang_google_grpc//:go_default_library",
        "@org_golang_google_grpc//codes:go_default_library",
        "@org_golang_google_grpc//status:go_default_library",
    ],
)

go_binary(
    name = "server",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
)

load("@io_bazel_rules_go//extras:embed_data.bzl", "go_embed_data")

# Generate a .go file containing all the credentials supplied during the build.
go_embed_data(
    name = "embedded-credentials",
    package = "credentials",
    srcs = glob(["credentials/**/*.flag*"]),
    visibility = ["//visibility:public"],
    flatten = True,
)

go_library(
    name = "credentials",
    srcs = [":embedded-credentials"],
    importpath = "github.com/enfabrica/enkit/astore/server/credentials",
    visibility = ["//visibility:public"],
)

# Generate a .go file containing all the configs supplied during the build.
go_embed_data(
    name = "embedded-configs",
    package = "configs",
    srcs = glob(["configs/**/*.config*"]),
    visibility = ["//visibility:public"],
    flatten = True,
)

go_library(
    name = "configs",
    srcs = [":embedded-configs"],
    importpath = "github.com/enfabrica/enkit/astore/server/configs",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "css",
    srcs = [
        "@npm//:node_modules/material-design-lite/material.min.css",
        "@npm//:node_modules/material-design-lite/material.min.css.map",
        "@npm//:node_modules/material-design-lite/material.min.js",
        "@npm//:node_modules/material-design-lite/material.min.js.map",
        "@npm//:node_modules/material-icons/iconfont/material-icons.css",
        "@npm//:node_modules/material-icons/iconfont/MaterialIcons-Regular.woff2",
        "@npm//:node_modules/material-icons/iconfont/MaterialIcons-Regular.woff",
        "@npm//:node_modules/material-icons/iconfont/MaterialIcons-Regular.ttf",
    ],
)

# Generate a .go file containing all the web assets.
go_embed_data(
    name = "embedded-assets",
    package = "assets",
    srcs = [":css"] + glob(["assets/**"]),
    visibility = ["//visibility:public"],
    flatten = True,
)

go_library(
    name = "assets",
    srcs = [":embedded-assets"],
    importpath = "github.com/enfabrica/enkit/astore/server/assets",
    visibility = ["//visibility:public"],
)

load("@com_github_ccontavalli_bazel_rules//appengine:defs.bzl", "go_appengine_deploy")

go_appengine_deploy(
    name = "deploy",
    entry = "github.com/enfabrica/enkit/astore/server",
    config = "deploy/app.yaml",
    gomod = "//:go.mod",
    gosum = "//:go.sum",
    deps = [
        ":server",
    ],
)
